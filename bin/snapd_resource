#!/usr/bin/env python3
# Copyright 2017 Canonical Ltd.
# All rights reserved.
#
# Written by:
#    Authors: Jonathan Cave <jonathan.cave@canonical.com>

import io
import string

from guacamole import Command
from checkbox_support.snap_utils.snapd import Snapd

from collections import namedtuple


def slugify(_string):
    """Transform string to one that can be used as the key in a resource job"""
    valid_chars = frozenset(
        "_{}{}".format(string.ascii_letters, string.digits))
    return ''.join(c if c in valid_chars else '_' for c in _string)


def http_to_resource(assertion_stream):
    """ Super naive Assertion parser

    No attempt to handle assertions with a body. Discards signatures based
    on lack of colon characters. Update: need to be less naive about
    gadget and kernel names on UC18
    """
    count = int(assertion_stream.headers['X-Ubuntu-Assertions-Count'])
    if count > 0:
        for line in io.StringIO(assertion_stream.text):
            if line.strip() == "":
                print()
            if line.count(':') == 1:
                key, val = [x.strip() for x in line.split(':')]
                if key in ('gadget', 'kernel'):
                    if '=' in val:
                        snap, track = [x.strip() for x in val.split('=')]
                        print('{}: {}'.format(key, snap))
                        print('{}_track: {}'.format(key, track))
                        continue
                print(line.strip())
    return count


class ModelAssertion(Command):

    def invoked(self, ctx):
        count = http_to_resource(Snapd().get_assertions('model'))
        if count == 0:
            # Print a dummy assertion - not nice but really trick to use
            # plainbox resources without some defualt value
            print('type: model')
            print('authority-id: None')
            print('model: None')
            print()


class SerialAssertion(Command):

    def invoked(self, ctx):
        count = http_to_resource(Snapd().get_assertions('serial'))
        if count == 0:
            # Print a dummy assertion - not nice but really trick to use
            # plainbox resources without some defualt value
            print('type: serial')
            print('authority-id: None')
            print('serial: None')
            print()


class Assertions(Command):

    sub_commands = (
        ('model', ModelAssertion),
        ('serial', SerialAssertion),
    )


class Snaps(Command):

    def invoked(self, ctx):
        data = Snapd().list()
        for snap in data:
            def print_field(key):
                try:
                    val = snap[key]
                except KeyError:
                    val = ""
                if val != "":
                    print("{}: {}".format(key, val))
            #  Whitelist of information that is of interest
            keys = ['name', 'type', 'channel', 'version', 'revision',
                    'developer', 'install-date', 'confinement', 'devmode',
                    'status']
            for f in keys:
                print_field(f)
            print()


class Endpoints(Command):

    def invoked(self, ctx):
        data = Snapd().interfaces()

        if 'plugs' in data:
            for plug in data['plugs']:
                def print_field(key):
                    val = plug[key]
                    if val != '':
                        print('{}: {}'.format(key, val))
                keys = ['snap', 'interface']
                for f in keys:
                    print_field(f)
                print('type: plug')
                print('name: {}'.format(plug['plug']))
                if 'attrs' in plug:
                    for attr, val in plug['attrs'].items():
                        print('attr_{}: {}'.format(slugify(attr), val))
                print()

        if 'slots' in data:
            for slot in data['slots']:
                def print_field(key):
                    val = slot[key]
                    if val != '':
                        print('{}: {}'.format(key, val))
                keys = ['snap', 'interface']
                for f in keys:
                    print_field(f)
                print('type: slot')
                print('name: {}'.format(slot['slot']))
                if 'attrs' in slot:
                    for attr, val in slot['attrs'].items():
                        print('attr_{}: {}'.format(slugify(attr), val))
                print()


Connection = namedtuple(
    'Connection',
    ['target_snap', 'target_slot', 'plug_snap', 'plug_plug'])


def get_connections():
    data = Snapd().interfaces()
    connections = []
    if 'plugs' in data:
        for plug in data['plugs']:
            if 'connections' in plug:
                for con in plug['connections']:
                    connections.append(Connection(
                        con['snap'], con['slot'],
                        plug['snap'], plug['plug']))
    return connections


class Connections(Command):

    def invoked(self, ctx):
        for conn in get_connections():
            print('slot: {}:{}'.format(conn.target_snap, conn.target_slot))
            print('plug: {}:{}'.format(conn.plug_snap, conn.plug_plug))
            print()


class Interfaces(Command):

    sub_commands = (
        ('endpoints', Endpoints),
        ('connections', Connections),
    )


class SnapdResource(Command):

    sub_commands = (
        ('assertions', Assertions),
        ('snaps', Snaps),
        ('interfaces', Interfaces),
    )


if __name__ == '__main__':
    SnapdResource().main()
